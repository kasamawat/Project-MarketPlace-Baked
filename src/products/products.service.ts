import {
  ForbiddenException,
  Injectable,
  NotFoundException,
} from "@nestjs/common";
import { InjectModel } from "@nestjs/mongoose";
import { Model, Types } from "mongoose";
import { Product, ProductDocument, ProductVariant } from "./product.schema";
import { CreateProductDto } from "./dto/create-product.dto";
import { UpdateProductDto } from "./dto/update-product.dto";
import { JwtPayload } from "src/auth/types/jwt-payload.interface";
import {
  assignIdsToVariants,
  updateVariantInTree,
} from "src/lib/functionTools";

@Injectable()
export class ProductService {
  constructor(
    @InjectModel(Product.name) private productModel: Model<ProductDocument>,
  ) {}

  async create(dto: CreateProductDto, payload: JwtPayload) {
    const storeId = new Types.ObjectId(payload.storeId);
    if (!storeId) {
      throw new Error("Store ID not found in token");
    }

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ _id ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏°‡∏Ñ‡∏ß‡∏£ ‡πÉ‡∏´‡πâ remove ‡∏ó‡∏¥‡πâ‡∏á
    if ("_id" in dto && (!dto._id || dto._id === "")) {
      delete dto._id;
    }

    // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå field ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ variant
    if (Array.isArray(dto.variants) && dto.variants.length > 0) {
      delete dto.image;
      delete dto.price;
      delete dto.stock;
    }

    const created = new this.productModel({
      ...dto,
      storeId,
    });
    return created.save();
  }

  async findAll(query: Record<string, any>, payload: JwtPayload) {
    const storeId = payload.storeId;
    // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô user ‡πÅ‡∏≠‡∏ö‡∏Ñ‡πâ‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏∑‡πà‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ query storeId ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô
    // ‡∏•‡∏ö storeId ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å query (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏à‡∏≤‡∏Å frontend)
    if (query.storeId) {
      delete query.storeId;
    }

    // ‡πÉ‡∏™‡πà storeId ‡∏à‡∏≤‡∏Å token (‡πÄ‡∏™‡∏°‡∏≠)
    const filter = { ...query, storeId };

    return this.productModel.find(filter).exec();
  }

  async findOne(id: string) {
    const product = await this.productModel.findById(id).exec();
    if (!product) throw new NotFoundException("Product not found");
    return product;
  }

  async update(id: string, dto: UpdateProductDto, payload: JwtPayload) {
    // üîí ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
    const productBefore = await this.productModel.findById(id);
    if (!productBefore) throw new NotFoundException("Product not found");
    if (productBefore.storeId.toString() !== payload.storeId) {
      throw new ForbiddenException("You cannot edit this product");
    }

    const updateObj: Partial<UpdateProductDto> = { ...dto };
    let unsetObj: Record<string, string> = {};

    if (dto.variants && dto.variants.length > 0) {
      dto.variants.map((v) => {
        v._id = new Types.ObjectId();
      });
      unsetObj = { image: "", price: "", stock: "" };
    } else {
      unsetObj = { variants: "" };
    }

    const product = await this.productModel.findByIdAndUpdate(
      id,
      { $set: updateObj, $unset: unsetObj },
      { new: true },
    );
    if (!product) throw new NotFoundException("Product not found");
    return product;
  }

  async remove(id: string) {
    return this.productModel.findByIdAndDelete(id).exec();
  }

  // src/products/products.service.ts
  async updateVariant(
    productId: string,
    variant: ProductVariant,
    payload: JwtPayload,
  ) {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå (‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö storeId ‡πÉ‡∏ô token)
    const product = await this.productModel.findById(productId);
    if (!product) throw new NotFoundException("Product not found");
    if (product.storeId.toString() !== payload.storeId) {
      throw new ForbiddenException("You cannot edit this product");
    }

    // ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ variant ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó ‡∏°‡∏µ _id ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    if (!variant._id) {
      variant._id = new Types.ObjectId();
    }
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á _id ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö sub-variants ‡∏ó‡∏∏‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö
    if (Array.isArray(variant.variants)) {
      assignIdsToVariants(variant.variants);
    }

    // ===== update (recursive) =====
    if (Array.isArray(product.variants)) {
      const found = updateVariantInTree(product.variants, variant);
      if (!found) {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÉ‡∏ô tree ‡πÄ‡∏î‡∏¥‡∏° ‡πÉ‡∏´‡πâ push ‡πÄ‡∏õ‡πá‡∏ô top-level variant
        product.variants.push(variant);
      }
    } else {
      product.variants = [variant];
    }

    await product.save();

    return variant;
  }
}
